name: Debug BDT Build Issue #2

on:
  push:
    branches: 
      - '2-bdt-causes-build-failures-in-cicd-pipelines-github-actions'
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'docs/BlazorDevTools.Site.Wasm/BlazorDevTools.Site.Wasm.csproj'

jobs:
  debug-build:
    runs-on: ubuntu-latest
    environment: test
    
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build with BDT Debug Info
      id: build
      continue-on-error: true  # Continue even if build fails to collect artifacts
      run: |
        echo "::group::Building with BDT markers enabled"
        dotnet build ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-restore \
          /p:EnableBlazorDevToolsInProduction=true \
          /p:BdtVerbose=true \
          /p:EnableAutomaticMarkers=true \
          /v:diagnostic \
          /bl:msbuild.binlog \
          2>&1 | tee build.log
        echo "::endgroup::"
        
    - name: Check Shadow Files
      if: always()
      run: |
        echo "::group::Shadow files created by BDT"
        find . -type d -name "blazordevtools" -exec ls -la {} \;
        echo "::endgroup::"
        
        echo "::group::Content of _Imports.razor shadow file"
        find . -path "*/blazordevtools/_Imports.razor" -exec cat {} \;
        echo "::endgroup::"
        
        echo "::group::Original _Imports.razor"
        find . -name "_Imports.razor" ! -path "*/blazordevtools/*" -exec cat {} \;
        echo "::endgroup::"
        
    - name: Analyze Namespace Issues
      if: always()
      run: |
        echo "::group::Checking namespace declarations"
        find . -name "*.razor" -path "*/blazordevtools/*" -exec grep -l "namespace\|@namespace\|@using" {} \;
        echo "::endgroup::"
        
        echo "::group::Project structure"
        find docs/BlazorDevTools.Site.Wasm -type f -name "*.razor" ! -path "*/obj/*" ! -path "*/bin/*" | head -20
        echo "::endgroup::"
        
    - name: Try Build Without BDT
      if: steps.build.outcome == 'failure'
      run: |
        echo "::group::Building WITHOUT BDT for comparison"
        dotnet clean ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} \
          --configuration Release \
          /p:EnableAutomaticMarkers=false \
          /v:normal
        echo "::endgroup::"
        
    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          build.log
          msbuild.binlog
          **/obj/**/blazordevtools/**
          **/obj/**/*.log
          **/bin/**/*.dll
          
    - name: Upload Shadow Files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: shadow-files-${{ github.run_number }}
        path: |
          **/obj/**/blazordevtools/**/*.razor
          **/obj/**/blazordevtools/**/*.cs
          
    - name: Publish if Build Succeeded
      if: steps.build.outcome == 'success'
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          -c Release \
          -o release \
          --no-build \
          --nologo
          
    - name: Deploy to Test Environment
      if: steps.build.outcome == 'success'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages
        folder: release/wwwroot
        target-folder: test/issue-2-${{ github.run_number }}
        clean: false
        single-commit: true
        
    - name: Comment Deployment URL
      if: steps.build.outcome == 'success'
      run: |
        echo "### 🚀 Test Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "View at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test/issue-2-${{ github.run_number }}/" >> $GITHUB_STEP_SUMMARY
        
    - name: Build Failure Summary
      if: steps.build.outcome == 'failure'
      run: |
        echo "### ❌ Build Failed with BDT" >> $GITHUB_STEP_SUMMARY
        echo "Download artifacts for detailed logs" >> $GITHUB_STEP_SUMMARY
        echo "Key error: Namespace 'Layout' not found in shadow files" >> $GITHUB_STEP_SUMMARY